// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Company {
    id   String @id @default(cuid())
    name String @db.VarChar(255)

    companyAccountConnections CompanyAccountConnection[]
    locations                 Location[]
    sessions                  Session[]
    taxes                     Tax[]
    vehicleTypes              VehicleType[]
    customers                 Customer[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Account {
    id    String @id @default(cuid())
    name  String @db.VarChar(255)
    email String @db.VarChar(255)

    companyAccountConnections CompanyAccountConnection[]
    accountLoginAttempts      AccountLoginAttempt[]
    sessions                  Session[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@unique([email])
}

model AccountLoginAttempt {
    id         String   @id @default(cuid())
    accessCode String   @db.VarChar(255) // should be a hash
    isUsed     Boolean  @default(false)
    expiresAt  DateTime

    accountId String
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model CompanyAccountConnection {
    id      String  @id @default(cuid())
    isOwner Boolean @default(false)

    accountId String
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model Location {
    id   String @id @default(cuid())
    name String @db.Text

    taxes Tax[]

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime

    accountId String
    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId String

    createdAt DateTime @default(now())
}

enum EnumTaxCalculationType {
    percentage
}

model Tax {
    id              String                 @id @default(cuid())
    name            String                 @db.VarChar(255)
    value           Float                  @default(0.00) @db.Float
    calculationType EnumTaxCalculationType

    companyId  String
    company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    locationId String
    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model VehicleType {
    id   String @id @default(cuid())
    name String @default("") @db.VarChar(255)

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Customer {
    id        String @id @default(cuid())
    firstName String @default("") @db.VarChar(255)
    lastName  String @default("") @db.VarChar(255)
    email     String @default("") @db.VarChar(255)

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}
